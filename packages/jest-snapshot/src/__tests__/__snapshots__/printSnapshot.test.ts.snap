// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`matcher error toMatchInlineSnapshot Expected properties must be an object (non-null) without snapshot 1`] = `
<d>expect(</><r>received</><d>).</>toMatchInlineSnapshot<d>(</><g>properties</><d>)</>

<b>Matcher error</>: Expected <g>properties</> must be an object

Expected properties has type:  boolean
Expected properties has value: <g>false</>
`;

exports[`matcher error toMatchInlineSnapshot Expected properties must be an object (null) with snapshot 1`] = `
<d>expect(</><r>received</><d>).</>toMatchInlineSnapshot<d>(</><g>properties</><d>, </>snapshot<d>)</>

<b>Matcher error</>: Expected <g>properties</> must be an object

Expected properties has value: <g>null</>
`;

exports[`matcher error toMatchInlineSnapshot Inline snapshot must be a string 1`] = `
<d>expect(</><r>received</><d>).</>resolves<d>.</>toMatchInlineSnapshot<d>(</><g>properties</><d>, </>snapshot<d>)</>

<b>Matcher error</>: Inline snapshot must be a string

Inline snapshot has type:  symbol
Inline snapshot has value: Symbol(is not a string)
`;

exports[`matcher error toMatchInlineSnapshot Snapshot matchers cannot be used with not 1`] = `
<d>expect(</><r>received</><d>).</>not<d>.</>toMatchInlineSnapshot<d>(</>snapshot<d>)</>

<b>Matcher error</>: Snapshot matchers cannot be used with <b>not</>
`;

exports[`matcher error toMatchSnapshot Expected properties must be an object (non-null) 1`] = `
<d>expect(</><r>received</><d>).</>toMatchSnapshot<d>(</><g>properties</><d>)</>

<b>Matcher error</>: Expected <g>properties</> must be an object

Expected properties has type:  function
Expected properties has value: <g>[Function]</>
`;

exports[`matcher error toMatchSnapshot Expected properties must be an object (null) with hint 1`] = `
<d>expect(</><r>received</><d>).</>toMatchSnapshot<d>(</><g>properties</><d>, </><b>hint</><d>)</>

<b>Matcher error</>: Expected <g>properties</> must be an object

Expected properties has value: <g>null</>

To provide a hint without properties: toMatchSnapshot('hint')
`;

exports[`matcher error toMatchSnapshot Expected properties must be an object (null) without hint 1`] = `
<d>expect(</><r>received</><d>).</>toMatchSnapshot<d>(</><g>properties</><d>)</>

<b>Matcher error</>: Expected <g>properties</> must be an object

Expected properties has value: <g>null</>
`;

exports[`matcher error toMatchSnapshot Snapshot state must be initialized 1`] = `
<d>expect(</><r>received</><d>).</>resolves<d>.</>toMatchSnapshot<d>(</><b>hint</><d>)</>

Snapshot state must be initialized

Snapshot state has value: undefined
`;

exports[`matcher error toMatchSnapshot received value must be an object (non-null) 1`] = `
<d>expect(</><r>received</><d>).</>toMatchSnapshot<d>(</><g>properties</><d>)</>

<b>Matcher error</>: <r>received</> value must be an object when the matcher has <g>properties</>

Received has type:  string
Received has value: <r>"string"</>
`;

exports[`matcher error toMatchSnapshot received value must be an object (null) 1`] = `
<d>expect(</><r>received</><d>).</>toMatchSnapshot<d>(</><g>properties</><d>)</>

<b>Matcher error</>: <r>received</> value must be an object when the matcher has <g>properties</>

Received has value: <r>null</>
`;

exports[`matcher error toThrowErrorMatchingInlineSnapshot Inline snapshot must be a string 1`] = `
<d>expect(</><r>received</><d>).</>toThrowErrorMatchingInlineSnapshot<d>(</>snapshot<d>)</>

<b>Matcher error</>: Inline snapshot must be a string

Inline snapshot has type:  number
Inline snapshot has value: 404
`;

exports[`matcher error toThrowErrorMatchingInlineSnapshot Snapshot state must be initialized 1`] = `
<d>expect(</><r>received</><d>).</>rejects<d>.</>toThrowErrorMatchingInlineSnapshot<d>(</>snapshot<d>)</>

Snapshot state must be initialized

Snapshot state has value: undefined
`;

exports[`matcher error toThrowErrorMatchingSnapshot Received value must be a function 1`] = `
<d>expect(</><r>received</><d>).</>toThrowErrorMatchingSnapshot<d>()</>

<b>Matcher error</>: <r>received</> value must be a function

Received has type:  number
Received has value: <r>13</>
`;

exports[`matcher error toThrowErrorMatchingSnapshot Snapshot matchers cannot be used with not 1`] = `
<d>expect(</><r>received</><d>).</>not<d>.</>toThrowErrorMatchingSnapshot<d>(</><b>hint</><d>)</>

<b>Matcher error</>: Snapshot matchers cannot be used with <b>not</>
`;

exports[`other error toThrowErrorMatchingSnapshot Received function did not throw 1`] = `
<d>expect(</><r>received</><d>).</>toThrowErrorMatchingSnapshot<d>()</>

Received function did not throw
`;

exports[`pass false toMatchInlineSnapshot with properties equals false with snapshot 1`] = `
<d>expect(</><r>received</><d>).</>toMatchInlineSnapshot<d>(</><g>properties</><d>, </>snapshot<d>)</>

Snapshot name: \`with properties 1\`

<g>- Expected properties  - 1</>
<r>+ Received value       + 1</>

<d>  Object {</>
<g>-   "id": "abcdef",</>
<r>+   "id": "abcdefg",</>
<d>  }</>
`;

exports[`pass false toMatchInlineSnapshot with properties equals false without snapshot 1`] = `
<d>expect(</><r>received</><d>).</>toMatchInlineSnapshot<d>(</><g>properties</><d>)</>

Snapshot name: \`with properties 1\`

<g>- Expected properties  - 1</>
<r>+ Received value       + 1</>

<d>  Object {</>
<g>-   "id": "abcdef",</>
<r>+   "id": "abcdefg",</>
<d>  }</>
`;

exports[`pass false toMatchInlineSnapshot with properties equals true 1`] = `
<d>expect(</><r>received</><d>).</>toMatchInlineSnapshot<d>(</>properties<d>, </><g>snapshot</><d>)</>

Snapshot name: \`with properties 1\`

<g>- Snapshot  - 1</>
<r>+ Received  + 1</>

<d>  Object {</>
<d>    "id": "abcdef",</>
<g>-   "text": "inline snapshot",</>
<r>+   "text": "received",</>
<d>    "type": "ADD_ITEM",</>
<d>  }</>
`;

exports[`pass false toMatchSnapshot New snapshot was not written (multi line) 1`] = `
<d>expect(</><r>received</><d>).</>toMatchSnapshot<d>(</><b>hint</><d>)</>

Snapshot name: \`New snapshot was not written: <b>(CI)</> 1\`

New snapshot was <b>not written</>. The update flag must be explicitly passed to write a new snapshot.

This is likely because this test is run in a continuous integration (CI) environment in which snapshots are not written by default.

Received:
<r>"To write or not to write,</>
<r>that is the question."</>
`;

exports[`pass false toMatchSnapshot New snapshot was not written (single line) 1`] = `
<d>expect(</><r>received</><d>).</>toMatchSnapshot<d>(</><b>hint</><d>)</>

Snapshot name: \`New snapshot was not written: <b>(CI)</> 2\`

New snapshot was <b>not written</>. The update flag must be explicitly passed to write a new snapshot.

This is likely because this test is run in a continuous integration (CI) environment in which snapshots are not written by default.

Received: <r>"Write me if you can!"</>
`;

exports[`pass false toMatchSnapshot with properties equals false isLineDiffable false 1`] = `
<d>expect(</><r>received</><d>).</>toMatchSnapshot<d>(</><g>properties</><d>)</>

Snapshot name: \`with properties 1\`

Expected properties: <g>{"name": "Error"}</>
Received value:      <r>[RangeError: Invalid array length]</>
`;

exports[`pass false toMatchSnapshot with properties equals false isLineDiffable true 1`] = `
<d>expect(</><r>received</><d>).</>toMatchSnapshot<d>(</><g>properties</><d>)</>

Snapshot name: \`with properties 1\`

<g>- Expected properties  - 1</>
<r>+ Received value       + 1</>

<d>  Object {</>
<g>-   "id": "abcdef",</>
<r>+   "id": "abcdefg",</>
<d>  }</>
`;

exports[`pass false toMatchSnapshot with properties equals true 1`] = `
<d>expect(</><r>received</><d>).</>toMatchSnapshot<d>(</>properties<d>, </><b>hint</><d>)</>

Snapshot name: \`with properties: <b>change text value</> 1\`

<g>- Snapshot  - 1</>
<r>+ Received  + 1</>

<d>  Object {</>
<d>    "id": "abcdef",</>
<g>-   "text": "snapshot",</>
<r>+   "text": "received",</>
<d>    "type": "ADD_ITEM",</>
<d>  }</>
`;

exports[`pass false toThrowErrorMatchingInlineSnapshot with snapshot 1`] = `
<d>expect(</><r>received</><d>).</>toThrowErrorMatchingInlineSnapshot<d>(</><g>snapshot</><d>)</>

Snapshot name: \`with snapshot 1\`

Snapshot: <g>"inline snapshot"</>
Received: <r>"received"</>
`;

exports[`printPropertiesAndReceived omit missing properties 1`] = `
<g>- Expected properties  - 2</>
<r>+ Received value       + 1</>

<d>  Object {</>
<g>-   "hash": Any<String>,</>
<g>-   "path": Any<String>,</>
<r>+   "path": "â€¦",</>
<d>  }</>
`;

exports[`printSnapshotAndReceived backtick single line expected and received 1`] = `
Snapshot: <g>"var foo = \`backtick\`;"</>
Received: <r>"var foo = <i>tag</i>\`backtick\`;"</>
`;

exports[`printSnapshotAndReceived empty string expected and received single line 1`] = `
Snapshot: <g>""</>
Received: <r>"single line string"</>
`;

exports[`printSnapshotAndReceived empty string received and expected multi line 1`] = `
<g>- Snapshot  - 3</>
<r>+ Received  + 0</>

<g>- multi</>
<g>- line</>
<g>- string</>
`;

exports[`printSnapshotAndReceived escape backslash in multi line string 1`] = `
<g>- Snapshot  - 1</>
<r>+ Received  + 2</>

<g>- Forward / slash<i> and b</i>ack \\ slash</>
<r>+ Forward / slash</>
<r>+ <i>B</i>ack \\ slash</>
`;

exports[`printSnapshotAndReceived escape backslash in single line string 1`] = `
Snapshot: <g>"<i>f</i>orward / slash and back \\\\ slash"</>
Received: <r>"<i>F</i>orward / slash and back \\\\ slash"</>
`;

exports[`printSnapshotAndReceived escape double quote marks in string 1`] = `
Snapshot: <g>"What does \\"<i>oo</i>bleck\\" mean?"</>
Received: <r>"What does \\"<i>ew</i>bleck\\" mean?"</>
`;

exports[`printSnapshotAndReceived escape regexp 1`] = `
Snapshot: <g>/\\\\\\\\\\("\\)/g</>
Received: <r>/\\\\\\\\\\("\\)/</>
`;

exports[`printSnapshotAndReceived expand false 1`] = `
<g>- Snapshot  - 1</>
<r>+ Received  + 3</>

<y>@@ -12,7 +12,9 @@</>
<d>  ? "number"</>
<d>  : T extends boolean</>
<d>  ? "boolean"</>
<d>  : T extends undefined</>
<d>  ? "undefined"</>
<g>- : T extends Function<i> </i>? "function"<i> </i>: "object";</>
<r>+ : T extends Function</>
<r>+ ? "function"</>
<r>+ : "object";</>
<d>  â†µ</>
`;

exports[`printSnapshotAndReceived expand true 1`] = `
<g>- Snapshot  - 1</>
<r>+ Received  + 3</>

<d>  type TypeName<T> =</>
<d>  T extends string ? "string" :</>
<d>  T extends number ? "number" :</>
<d>  T extends boolean ? "boolean" :</>
<d>  T extends undefined ? "undefined" :</>
<d>  T extends Function ? "function" :</>
<d>  "object";</>
<d>  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</>
<d>  type TypeName<T> = T extends string</>
<d>  ? "string"</>
<d>  : T extends number</>
<d>  ? "number"</>
<d>  : T extends boolean</>
<d>  ? "boolean"</>
<d>  : T extends undefined</>
<d>  ? "undefined"</>
<g>- : T extends Function<i> </i>? "function"<i> </i>: "object";</>
<r>+ : T extends Function</>
<r>+ ? "function"</>
<r>+ : "object";</>
<d>  â†µ</>
`;

exports[`printSnapshotAndReceived fallback to line diff 1`] = `
<g>- Snapshot  - 1</>
<r>+ Received  + 8</>

<r>+ ====================================options=====================================</>
<r>+ parsers: ["flow", "typescript"]</>
<r>+ printWidth: 80</>
<r>+                                                                                 | printWidth</>
<r>+ =====================================input======================================</>
<d>  [...a, ...b,];</>
<d>  [...a, ...b];</>
<g>- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</>
<r>+</>
<r>+ =====================================output=====================================</>
<d>  [...a, ...b];</>
<d>  [...a, ...b];</>

<r>+ ================================================================================</>
`;

exports[`printSnapshotAndReceived has no common after clean up chaff array 1`] = `
<g>- Snapshot  - 2</>
<r>+ Received  + 2</>

<d>  Array [</>
<g>-   "delete",</>
<g>-   "two",</>
<r>+   "insert",</>
<r>+   "2",</>
<d>  ]</>
`;

exports[`printSnapshotAndReceived has no common after clean up chaff string single line 1`] = `
Snapshot: <g>"delete"</>
Received: <r>"insert"</>
`;

exports[`printSnapshotAndReceived isLineDiffable false asymmetric matcher 1`] = `
Snapshot: <g>null</>
Received: <r>Object {</>
<r>  "asymmetricMatch": [Function],</>
<r>}</>
`;

exports[`printSnapshotAndReceived isLineDiffable false boolean 1`] = `
Snapshot: <g>true</>
Received: <r>false</>
`;

exports[`printSnapshotAndReceived isLineDiffable false date 1`] = `
Snapshot: <g>2019-09-19T00:00:00.000Z</>
Received: <r>2019-09-20T00:00:00.000Z</>
`;

exports[`printSnapshotAndReceived isLineDiffable false error 1`] = `
Snapshot: <g>[Error: Cannot spread fragment "NameAndAppearances" within itself.]</>
Received: <r>[Error: Cannot spread fragment "NameAndAppearancesAndFriends" within itself.]</>
`;

exports[`printSnapshotAndReceived isLineDiffable false function 1`] = `
Snapshot: <g>undefined</>
Received: <r>[Function]</>
`;

exports[`printSnapshotAndReceived isLineDiffable false number 1`] = `
Snapshot: <g>-0</>
Received: <r>NaN</>
`;

exports[`printSnapshotAndReceived isLineDiffable true array 1`] = `
<g>- Snapshot  - 0</>
<r>+ Received  + 2</>

<d>  Array [</>
<d>    Object {</>
<r>+     "_id": "b14680dec683e744ada1f2fe08614086",</>
<d>      "code": 4011,</>
<d>      "weight": 2.13,</>
<d>    },</>
<d>    Object {</>
<r>+     "_id": "7fc63ff01769c4fa7d9279e97e307829",</>
<d>      "code": 4019,</>
<d>      "count": 4,</>
<d>    },</>
<d>  ]</>
`;

exports[`printSnapshotAndReceived isLineDiffable true object 1`] = `
<g>- Snapshot  - 2</>
<r>+ Received  + 3</>

<d>  Object {</>
<d>    "props": Object {</>
<g>-     "className": "logo",</>
<g>-     "src": "/img/jest.png",</>
<r>+     "alt": "Jest logo",</>
<r>+     "class": "logo",</>
<r>+     "src": "/img/jest.svg",</>
<d>    },</>
<d>    "type": "img",</>
<d>  }</>
`;

exports[`printSnapshotAndReceived isLineDiffable true single line expected and multi line received 1`] = `
<g>- Snapshot  - 1</>
<r>+ Received  + 3</>

<g>- Array []</>
<r>+ Array [</>
<r>+   0,</>
<r>+ ]</>
`;

exports[`printSnapshotAndReceived isLineDiffable true single line expected and received 1`] = `
<g>- Snapshot  - 1</>
<r>+ Received  + 1</>

<g>- Array []</>
<r>+ Object {}</>
`;

exports[`printSnapshotAndReceived multi line small change in one line and other is unchanged 1`] = `
<g>- Snapshot  - 1</>
<r>+ Received  + 1</>

<g>- There is no route defined for key <i>'</i>Settings<i>'</i>.</>
<r>+ There is no route defined for key Settings.</>
<d>  Must be one of: 'Home'</>
`;

exports[`printSnapshotAndReceived multi line small changes 1`] = `
<g>- Snapshot  - 7</>
<r>+ Received  + 7</>

<g>-     6<i>9</i> |<Y> </></>
<r>+     6<i>8</i> |<Y> </></>
<g>-     <i>70</i> | test('assert.doesNotThrow', () => {</>
<r>+     <i>69</i> | test('assert.doesNotThrow', () => {</>
<g>-   > 7<i>1</i> |   assert.doesNotThrow(() => {</>
<r>+   > 7<i>0</i> |   assert.doesNotThrow(() => {</>
<d>         |          ^</>
<g>-     7<i>2</i> |     throw Error('err!');</>
<r>+     7<i>1</i> |     throw Error('err!');</>
<g>-     7<i>3</i> |   });</>
<r>+     7<i>2</i> |   });</>
<g>-     7<i>4</i> | });</>
<r>+     7<i>3</i> | });</>
<g>-     at Object.doesNotThrow (__tests__/assertionError.test.js:7<i>1</i>:10)</>
<r>+     at Object.doesNotThrow (__tests__/assertionError.test.js:7<i>0</i>:10)</>
`;

exports[`printSnapshotAndReceived single line large changes 1`] = `
Snapshot: <g>"<i>A</i>rray length<i> must be a finite positive integer</i>"</>
Received: <r>"<i>Invalid a</i>rray length"</>
`;

exports[`printSnapshotAndReceived without serialize backtick single line expected and multi line received 1`] = `
<g>- Snapshot  - 1</>
<r>+ Received  + 2</>

<g>- var foo = \`backtick\`;</>
<r>+ var foo = \`back</>
<r>+ tick\`;</>
`;

exports[`printSnapshotAndReceived without serialize backtick single line expected and received 1`] = `
<g>- Snapshot  - 1</>
<r>+ Received  + 1</>

<g>- var foo = \`backtick\`;</>
<r>+ var foo = \`back<i>\${x}</i>tick\`;</>
`;

exports[`printSnapshotAndReceived without serialize has no common after clean up chaff multi line 1`] = `
<g>- Snapshot  - 2</>
<r>+ Received  + 2</>

<g>- delete</>
<g>- two</>
<r>+ insert</>
<r>+ 2</>
`;

exports[`printSnapshotAndReceived without serialize has no common after clean up chaff single line 1`] = `
<g>- Snapshot  - 1</>
<r>+ Received  + 1</>

<g>- delete</>
<r>+ insert</>
`;

exports[`printSnapshotAndReceived without serialize prettier/pull/5590 1`] = `
<g>- Snapshot  - 1</>
<r>+ Received  + 1</>

<y>@@ -4,8 +4,8 @@</>
<d>                                                                                  | printWidth</>
<d>  =====================================input======================================</>
<d>  <img src="test.png" alt='John "ShotGun" Nelson'></>

<d>  =====================================output=====================================</>
<g>- <img src="test.png" alt=<i>"</i>John <i>&quot;</i>ShotGun<i>&quot;</i> Nelson<i>"</i> /></>
<r>+ <img src="test.png" alt=<i>'</i>John <i>"</i>ShotGun<i>"</i> Nelson<i>'</i> /></>

<d>  ================================================================================</>
`;
